// Copyright (c) 2024 The Stdlib Authors. License is Apache-2.0: http://www.apache.org/licenses/LICENSE-2.0
/// <reference types="./index.d.ts" />
import e from"https://cdn.jsdelivr.net/gh/stdlib-js/utils-define-nonenumerable-read-only-property@v0.1.0-esm/index.mjs";import t from"https://cdn.jsdelivr.net/gh/stdlib-js/utils-define-nonenumerable-read-only-accessor@v0.1.0-esm/index.mjs";import n from"https://cdn.jsdelivr.net/gh/stdlib-js/utils-define-nonenumerable-read-write-accessor@v0.2.0-esm/index.mjs";import s from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-plain-object@v0.2.0-esm/index.mjs";import r from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-function@v0.2.0-esm/index.mjs";import i from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-has-own-property@v0.2.0-esm/index.mjs";import o from"https://cdn.jsdelivr.net/gh/stdlib-js/utils-constant-function@v0.2.0-esm/index.mjs";import m from"https://cdn.jsdelivr.net/gh/stdlib-js/utils-noop@v0.2.0-esm/index.mjs";import{factory as d}from"https://cdn.jsdelivr.net/gh/stdlib-js/random-base-mt19937@v0.1.0-esm/index.mjs";import a from"https://cdn.jsdelivr.net/gh/stdlib-js/math-base-assert-is-nan@v0.2.0-esm/index.mjs";import l from"https://cdn.jsdelivr.net/gh/stdlib-js/array-to-json@v0.2.0-esm/index.mjs";import p from"https://cdn.jsdelivr.net/gh/stdlib-js/string-format@v0.1.1-esm/index.mjs";import{isPrimitive as u}from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-number@v0.2.0-esm/index.mjs";import{isPrimitive as h}from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-positive-number@v0.2.0-esm/index.mjs";import j from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-nan@v0.2.0-esm/index.mjs";import g from"https://cdn.jsdelivr.net/gh/stdlib-js/math-base-special-signum@v0.2.0-esm/index.mjs";import f from"https://cdn.jsdelivr.net/gh/stdlib-js/math-base-special-abs@v0.2.0-esm/index.mjs";import v from"https://cdn.jsdelivr.net/gh/stdlib-js/math-base-special-ln@v0.1.1-esm/index.mjs";function c(e,t){return!u(e)||j(e)?new TypeError(p("invalid argument. First argument must be a number and not NaN. Value: `%s`.",e)):h(t)?null:new TypeError(p("invalid argument. Second argument must be a positive number. Value: `%s`.",t))}function b(e,t,n){var s=e()-.5;return t-n*g(s)*v(1-2*f(s))}function x(){var u,h,j,g,f,v;if(0===arguments.length)h=d();else if(1===arguments.length){if(!s(u=arguments[0]))throw new TypeError(p("invalid argument. Options argument must be an object. Value: `%s`.",u));if(i(u,"prng")){if(!r(u.prng))throw new TypeError(p("invalid option. `%s` option must be a pseudorandom number generator function. Option: `%s`.","prng",u.prng));h=u.prng}else h=d(u)}else{if(g=c(f=arguments[0],v=arguments[1]))throw g;if(arguments.length>2){if(!s(u=arguments[2]))throw new TypeError(p("invalid argument. Options argument must be an object. Value: `%s`.",u));if(i(u,"prng")){if(!r(u.prng))throw new TypeError(p("invalid option. `%s` option must be a pseudorandom number generator function. Option: `%s`.","prng",u.prng));h=u.prng}else h=d(u)}else h=d()}return e(j=void 0===f?P:T,"NAME","laplace"),u&&u.prng?(e(j,"seed",null),e(j,"seedLength",null),n(j,"state",o(null),m),e(j,"stateLength",null),e(j,"byteLength",null),e(j,"toJSON",o(null)),e(j,"PRNG",h)):(t(j,"seed",x),t(j,"seedLength",y),n(j,"state",L,E),t(j,"stateLength",w),t(j,"byteLength",N),e(j,"toJSON",O),e(j,"PRNG",h),h=h.normalized),j;function x(){return h.seed}function y(){return h.seedLength}function w(){return h.stateLength}function N(){return h.byteLength}function L(){return h.state}function E(e){h.state=e}function O(){var e={type:"PRNG"};return e.name=j.NAME,e.state=l(h.state),e.params=void 0===f?[]:[f,v],e}function T(){return b(h,f,v)}function P(e,t){return a(e)||a(t)||t<=0?NaN:b(h,e,t)}}var y=x();e(y,"factory",x);export{y as default,x as factory};
//# sourceMappingURL=index.mjs.map
